/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/

/* coherentSubscriber.java

   A publication of data of type coherent

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language java -example <arch> .idl

   Example publication of type coherent automatically generated by 
   'rtiddsgen' To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription on the same domain used for with the command
       java coherentSubscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       java coherentPublisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
            
       Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
       Java.                       
       
        On UNIX systems: 
             add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
             variable
                                         
        On Windows systems:
             add %NDDSHOME%\lib\<arch> to the 'Path' environment variable
                        

       Run the Java applications:
       
        java -Djava.ext.dirs=$NDDSHOME/class coherentPublisher <domain_id>

        java -Djava.ext.dirs=$NDDSHOME/class coherentSubscriber <domain_id>  
       
       
modification history
------------ -------   
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class coherentSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------
    
    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }
        
        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }
        
        
        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */
        
        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }
    
    
    
    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------
    
    // --- Constructors: -----------------------------------------------------
    
    private coherentSubscriber() {
        super();
    }
    
    
    // -----------------------------------------------------------------------
    
    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        coherentDataReader reader = null;

        try {

            // --- Create participant --- //
    
            /* To customize participant QoS, use
               the configuration file
               USER_QOS_PROFILES.xml */
    
            participant = DomainParticipantFactory.TheParticipantFactory.
                create_participant(
                    domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }                         

            // --- Create subscriber --- //
    
            /* To customize subscriber QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     
               
            
            /* If you want to change the DataWriter's QoS programmatically 
             * rather than using the XML file, you will need to add the 
             * following lines to your code and comment out the 
             * create_subscriber call above.
             */
            //Start changes for Coherent_Presentation

/*            // Get default subscriber QoS to customize 
            SubscriberQos subscriber_qos = new SubscriberQos();
            participant.get_default_subscriber_qos(subscriber_qos);

            subscriber_qos.presentation.access_scope =
                PresentationQosPolicyAccessScopeKind.TOPIC_PRESENTATION_QOS;
            subscriber_qos.presentation.coherent_access = true;

            subscriber = participant.create_subscriber(
                subscriber_qos, null,
                StatusKind.STATUS_MASK_NONE);

*/            // End changes for Coherent_Presentation
            
            // --- Create topic --- //
        
            /* Register type before creating topic */
            String typeName = coherentTypeSupport.get_type_name(); 
            coherentTypeSupport.register_type(participant, typeName);
    
            /* To customize topic QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            topic = participant.create_topic(
                "Example coherent",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }                     
        
            // --- Create reader --- //

            listener = new coherentListener();
    
            /* To customize data reader QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            reader = (coherentDataReader)
                subscriber.create_datareader(
                    topic, Subscriber.DATAREADER_QOS_DEFAULT, listener,
                    StatusKind.STATUS_MASK_ALL);
            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }                         
        
            /* If you want to change the DataWriter's QoS programmatically 
             * rather than using the XML file, you will need to add the 
             * following lines to your code and comment out the 
             * create_datareader call above.
             */
            
            // Start changes for Coherent_Presentation

/*            // Get default datareader QoS to customize
            DataReaderQos datareader_qos = new DataReaderQos();
            subscriber.get_default_datareader_qos(datareader_qos);

            datareader_qos.reliability.kind =
                ReliabilityQosPolicyKind.RELIABLE_RELIABILITY_QOS;
            datareader_qos.history.depth = 10;

            reader = (coherentDataReader)
                subscriber.create_datareader(
                    topic, datareader_qos, listener,
                    StatusKind.STATUS_MASK_ALL);
        
*/            // End changes for Coherent_Presentation
            
            // --- Wait for data --- //

            final long receivePeriodSec = 4;

            for (int count = 0;
                 (sampleCount == 0) || (count < sampleCount);
                 ++count) {
                System.out.println("coherent subscriber sleeping for "
                                   + receivePeriodSec + " sec...");
                try {
                    Thread.sleep(receivePeriodSec * 1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                    delete_participant(participant);
            }
            /* RTI Connext provides the finalize_instance()
               method for users who want to release memory used by the
               participant factory singleton. Uncomment the following block of
               code for clean destruction of the participant factory
               singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }
    
    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------
    
    // =======================================================================
    private static class CoherentState {
        static final int nvals = 6;
        static int statevals[] = new int[nvals];

        public void set_state(char c, int value) {
            int idx = c - (int)('a');
            if (idx < 0 || idx >= nvals) {
                System.out.print("error: invalid field '" + c + "'\n");
                return;
            }
            statevals[idx] = value;
        }

        public String toString() {
            char c = 'a';
            String res = new String();
            for (int i=0; i < nvals; ++i) {
                res = res + " " + (c++) + " = " + statevals[i] + ";";
            }
            return res;
        }
    };
    
    private static class coherentListener extends DataReaderAdapter {
            
        coherentSeq _dataSeq = new coherentSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();
        CoherentState _reader_state = new CoherentState();
        
        public void on_data_available(DataReader reader) {
            coherentDataReader coherentReader =
                (coherentDataReader)reader;
            
            try {
                coherentReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);
                // Start changes for Coherent_Presentation

                // Firstly process all samples
                int len = 0;
                coherent data;
                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);
                    if (info.valid_data) {
                        data = (coherent)_dataSeq.get(i);
                        len++;
                        _reader_state.set_state(data.field, data.value);
                    }
                }
                
                // Then, we print the results
                if (len > 0) {
                    System.out.println("Received " + len + " updates\n  " +
                            _reader_state.toString());
                }
                
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                coherentReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
}


        