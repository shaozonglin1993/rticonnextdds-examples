/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
/* msg_subscriber.cs

   A subscription example

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C# -example <arch> msg.idl

   Example subscription of type msg automatically generated by 
   'rtiddsgen'. To test them, follow these steps:

   (1) Compile this file and the example publication.

   (2) Start the subscription with the command
       objs\<arch>\msg_subscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       objs\<arch>\msg_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 

   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
                                   
   Example:
        
       To run the example application on domain <domain_id>:
                          
       bin\<Debug|Release>\msg_publisher <domain_id> <sample_count>  
       bin\<Debug|Release>\msg_subscriber <domain_id> <sample_count>
              
       
modification history
------------ -------
*/

/* We are going to use the BuiltinPublicationListener_on_data_available
 * to detect the topics that are being published on the domain
 *
 * Once we have detected a new topic, we will print out the Topic Name,
 * Participant ID, DataWriter id, and Data Type.
 */
public class BuiltinPublicationListener : DDS.DataReaderListener {
    /* Simple method to handle the participant key value */

    private DDS.PublicationBuiltinTopicDataSeq data_seq;
    private DDS.SampleInfoSeq info_seq;

    public BuiltinPublicationListener() {
        data_seq = new DDS.PublicationBuiltinTopicDataSeq();
        info_seq = new DDS.SampleInfoSeq();
    }

    public override void on_data_available( DDS.DataReader reader ) {
        DDS.PublicationBuiltinTopicDataDataReader builtin_reader =
                (DDS.PublicationBuiltinTopicDataDataReader)reader;

        try {
            builtin_reader.take(
                data_seq,
                info_seq,
                DDS.ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                DDS.SampleStateKind.ANY_SAMPLE_STATE,
                DDS.ViewStateKind.ANY_VIEW_STATE,
                DDS.InstanceStateKind.ANY_INSTANCE_STATE);
        } catch (DDS.Retcode_NoData) {
            return;
        } catch (DDS.Exception e) {
            Console.WriteLine("take error {0}", e);
            return;
        }

        System.Int32 data_length = data_seq.length;
        for (int i = 0; i < data_length; ++i) {

            if (!info_seq.get_at(i).valid_data) {
                continue;
            }
            Console.WriteLine("-----");
            Console.WriteLine("Found topic \"{0}\"", 
                data_seq.get_at(i).topic_name);
            Console.WriteLine("participant: {0:x8}{1:x8}{2:x8}",
                data_seq.get_at(i).participant_key.value1,
                data_seq.get_at(i).participant_key.value2,
                data_seq.get_at(i).participant_key.value3);
            Console.WriteLine("datawriter: {0:x8}{1:x8}{2:x8}",
                data_seq.get_at(i).key.value1,
                data_seq.get_at(i).key.value2,
                data_seq.get_at(i).key.value3);
            Console.WriteLine("type:");

            if (data_seq.get_at(i).type_code == null) {
                Console.WriteLine("No type code received, perhaps increase " + 
                    "type_code_max_serialized_length?");
                continue;
            }
            /* Using the type_code propagated we print the data type
             * with print_IDL(). */
            try {
                data_seq.get_at(i).type_code.print_IDL(2);
            } catch (DDS.Exception) {
                Console.WriteLine("error printing IDL");
            }
        }

        try {
            builtin_reader.return_loan(data_seq, info_seq);
        } catch (DDS.Exception e) {
            Console.WriteLine("return loan error {0}", e);
        }
    }
}

public class msgSubscriber {

    public static void Main(string[] args) {

        // --- Get domain ID --- //
        int domain_id = 0;
        if (args.Length >= 1) {
            domain_id = Int32.Parse(args[0]);
        }

        // --- Get max loop count; 0 means infinite loop  --- //
        int sample_count = 0;
        if (args.Length >= 2) {
            sample_count = Int32.Parse(args[1]);
        }

        /* Uncomment this to turn on additional logging
        NDDS.ConfigLogger.get_instance().set_verbosity_by_category(
            NDDS.LogCategory.NDDS_CONFIG_LOG_CATEGORY_API, 
            NDDS.LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        try {
            msgSubscriber.subscribe(
                domain_id, sample_count);
        }
        catch(DDS.Exception) {
            Console.WriteLine("error in subscriber");
        }
    }

    static void subscribe(int domain_id, int sample_count) {

        // --- Create participant --- //

        /* To customize the participant QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.DomainParticipant participant =
            DDS.DomainParticipantFactory.get_instance().create_participant(
                domain_id,
                DDS.DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT, 
                null /* listener */,
                DDS.StatusMask.STATUS_MASK_NONE);
        if (participant == null) {
            shutdown(participant);
            throw new ApplicationException("create_participant error");
        }

        /* If you want to change the type_code_max_serialized_length
         * programmatically (e.g., to 3070) rather than using the XML file, you
         * will need to add the following lines to your code and comment out the
         * create_participant call above. */
       /*
        DDS.DomainParticipantQos participant_qos =
            new DDS.DomainParticipantQos();
        try {
            DDS.DomainParticipantFactory.get_instance().
                get_default_participant_qos(participant_qos);

        } catch (DDS.Exception) {
            Console.WriteLine("error in participant_qos");
        }

        participant_qos.resource_limits.type_code_max_serialized_length = 3070;

        try {
            DDS.DomainParticipantFactory.get_instance().delete_participant(
                ref participant);
        }
        catch (DDS.Exception) {
            Console.WriteLine("error deleting participant");
        }
        
        participant = 
            DDS.DomainParticipantFactory.get_instance().create_participant(
            domain_id, participant_qos, null, DDS.StatusMask.STATUS_MASK_NONE);
        */

        /* We don't actually care about receiving the samples, just the
         * topic information.  To do this, we only need the builtin
         * datareader for publications.
         */
        /* First get the built-in subscriber */

        // --- Create subscriber --- //
        
        /* To customize the subscriber QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.Subscriber builtin_subscriber = 
            participant.get_builtin_subscriber();
        if (builtin_subscriber == null) {
            shutdown(participant);
            throw new ApplicationException("creating builtin subscriber error");
        }

        /* Then get the data reader for the built-in subscriber */
        DDS.PublicationBuiltinTopicDataDataReader builtin_publication_datareader =
            (DDS.PublicationBuiltinTopicDataDataReader)
                builtin_subscriber.lookup_datareader(
                    DDS.PublicationBuiltinTopicDataTypeSupport.
                        PUBLICATION_TOPIC_NAME);
        if (builtin_publication_datareader == null) {
            shutdown(participant);
            throw new ApplicationException("creating builtin publication data" +
                " reader error");
        }

        /* Finally install the listener */
        BuiltinPublicationListener builtin_publication_listener = 
            new BuiltinPublicationListener();

        builtin_publication_datareader.set_listener(
            builtin_publication_listener,
            DDS.StatusMask.STATUS_MASK_ALL);

        /* Main loop */
        const System.Int32 receive_period = 1000; // milliseconds
        for (int count=0;
             (sample_count == 0) || (count < sample_count);
             ++count) {
             System.Threading.Thread.Sleep(receive_period);
        }

        // --- Shutdown --- //

        /* Delete all entities */
        shutdown(participant);
        builtin_publication_listener = null;
    }


    static void shutdown(
        DDS.DomainParticipant participant) {

        /* Delete all entities */

        if (participant != null) {
            participant.delete_contained_entities();
            DDS.DomainParticipantFactory.get_instance().delete_participant(
                ref participant);
        }

        /* RTI Connext provides finalize_instance() method on
           domain participant factory for users who want to release memory
           used by the participant factory. Uncomment the following block of
           code for clean destruction of the singleton. */
        /*
        try {
            DDS.DomainParticipantFactory.finalize_instance();
        }
        catch(DDS.Exception e) {
            Console.WriteLine("finalize_instance error {0}", e);
            throw e;
        }
        */
    }
}



