/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/
/* msgSubscriber.java

 A publication of data of type msg

 This file is derived from code automatically generated by the rtiddsgen 
 command:

 rtiddsgen -language java -example <arch> .idl

 Example publication of type msg automatically generated by 
 'rtiddsgen' To test them follow these steps:

 (1) Compile this file and the example subscription.

 (2) Start the subscription on the same domain used for with the command
 java msgSubscriber <domain_id> <sample_count>

 (3) Start the publication with the command
 java msgPublisher <domain_id> <sample_count>

 (4) [Optional] Specify the list of discovery initial peers and 
 multicast receive addresses via an environment variable or a file 
 (in the current working directory) called NDDS_DISCOVERY_PEERS. 

 You can run any number of publishers and subscribers programs, and can 
 add and remove them dynamically from the domain.


 Example:

 To run the example application on domain <domain_id>:

 Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
 Java.                       

 On UNIX systems: 
 add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
 variable

 On Windows systems:
 add %NDDSHOME%\lib\<arch> to the 'Path' environment variable


 Run the Java applications:

 java -Djava.ext.dirs=$NDDSHOME/class msgPublisher <domain_id>

 java -Djava.ext.dirs=$NDDSHOME/class msgSubscriber <domain_id>  


 modification history
 ------------ -------   
 */

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

//For Builtin Topic and Typecode features
import com.rti.dds.publication.builtin.*;
import com.rti.dds.typecode.*;

// ===========================================================================

public class msgSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /*
         * Uncomment this to turn on additional logging
         * Logger.get_instance().set_verbosity_by_category(
         * LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
         * LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
         */

        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private msgSubscriber() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        msgDataReader reader = null;

        try {

            // --- Create participant --- //

            /*
             * To customize participant QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */
            participant = DomainParticipantFactory.TheParticipantFactory
                    .create_participant(domainId,
                            DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                            null, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }

            /*
             * If you want to change the type_code_max_serialized_length
             * programmatically (e.g., to 3070) rather than using the XML file,
             * you will need to add the following lines to your code and comment
             * out the create_participant call above.
             */
            
            /*
            DomainParticipantQos participant_qos = new DomainParticipantQos();
            DomainParticipantFactory.TheParticipantFactory
                    .get_default_participant_qos(participant_qos);

            participant_qos.resource_limits.type_code_max_serialized_length = 3070;

            participant = DomainParticipantFactory.TheParticipantFactory
                    .create_participant(domainId, participant_qos, null,
                            StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }
            */
            
            // First get the built-in subscriber
            Subscriber builtin_subscriber = participant
                    .get_builtin_subscriber();

            // Then get the data reader for the built-in subscriber
            PublicationBuiltinTopicDataDataReader builtin_publication_datareader =
                (PublicationBuiltinTopicDataDataReader) builtin_subscriber
                    .lookup_datareader(PublicationBuiltinTopicDataTypeSupport.
                            PUBLICATION_TOPIC_NAME);

            // Finally install the listener
            BuiltinPublicationListener builtin_publication_listener = 
                    new BuiltinPublicationListener();

            builtin_publication_datareader.set_listener(
                    builtin_publication_listener,
                    StatusKind.DATA_AVAILABLE_STATUS);

            final long receivePeriodSec = 1;

            for (int count = 0; (sampleCount == 0) || (count < sampleCount); 
                    ++count) {
                try {
                    Thread.sleep(receivePeriodSec * 1000); // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if (participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory
                        .delete_participant(participant);
            }
            /*
             * RTI Connext provides the finalize_instance() method for users who
             * want to release memory used by the participant factory singleton.
             * Uncomment the following block of code for clean destruction of
             * the participant factory singleton.
             */
            // DomainParticipantFactory.finalize_instance();
        }
    }

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================
    private static class BuiltinPublicationListener extends DataReaderAdapter {
        /* Simple method to handle the participant key value */

        private static String[] zero_pad = { "00000000", "0000000", "000000",
                "00000", "0000", "000", "00", "0", "" };

        public static String toHex(int i) {
            String s = Integer.toHexString(i);
            return (zero_pad[s.length()] + s);
        }

        public void on_data_available(DataReader reader) {
            PublicationBuiltinTopicDataSeq dataSeq = 
                    new PublicationBuiltinTopicDataSeq();
            SampleInfoSeq infoSeq = new SampleInfoSeq();

            PublicationBuiltinTopicDataDataReader builtin_reader = 
                    (PublicationBuiltinTopicDataDataReader) reader;

            try {
                builtin_reader.take(dataSeq, infoSeq,
                        ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                        SampleStateKind.ANY_SAMPLE_STATE,
                        ViewStateKind.ANY_VIEW_STATE,
                        InstanceStateKind.ANY_INSTANCE_STATE);

                for (int i = 0; i < infoSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo) infoSeq.get(i);
                    PublicationBuiltinTopicData data = 
                            (PublicationBuiltinTopicData) dataSeq
                            .get(i);
                    if (!info.valid_data) {
                        continue;
                    }
                    System.out
                            .printf("-----\nFound topic \"%s\"\n"
                                    + "participant: %08x%08x%08x\n"
                                    + "datawriter: %08x%08x%08x\ntype:\n",
                                    data.topic_name,
                                    data.participant_key.value[0],
                                    data.participant_key.value[1],
                                    data.participant_key.value[2],
                                    data.key.value[0], data.key.value[1],
                                    data.key.value[2]);

                    if (data.type_code == null) {
                        System.out.print("No type code received, perhaps " +
                                "increase type_code_max_serialized_length?\n");
                        continue;
                    }

                    /*
                     * Using the type_code propagated we print the data type
                     * with print_IDL().
                     */
                    data.type_code.print_IDL(2);
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                builtin_reader.return_loan(dataSeq, infoSeq);
            }
        }

    }
}
