/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/
/* ShapeTypePublisher.java

 A publication of data of type ShapeType

 This file is derived from code automatically generated by the rtiddsgen 
 command:

 rtiddsgen -language java -example <arch> .idl

 Example publication of type ShapeType automatically generated by 
 'rtiddsgen' To test them follow these steps:

 (1) Compile this file and the example subscription.

 (2) Start the subscription with the command
 java ShapeTypeSubscriber <domain_id> <sample_count>

 (3) Start the publication with the command
 java ShapeTypePublisher <domain_id> <sample_count>

 (4) [Optional] Specify the list of discovery initial peers and 
 multicast receive addresses via an environment variable or a file 
 (in the current working directory) called NDDS_DISCOVERY_PEERS.  

 You can run any number of publishers and subscribers programs, and can 
 add and remove them dynamically from the domain.

 Example:

 To run the example application on domain <domain_id>:

 Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
 Java.                       

 On Unix: 
 add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
 variable

 On Windows:
 add %NDDSHOME%\lib\<arch> to the 'Path' environment variable


 Run the Java applications:

 java -Djava.ext.dirs=$NDDSHOME/class ShapeTypePublisher <domain_id>

 java -Djava.ext.dirs=$NDDSHOME/class ShapeTypeSubscriber <domain_id>        



 modification history
 ------------ -------         
 */

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.dynamicdata.DynamicData;
import com.rti.dds.dynamicdata.DynamicDataTypeSupport;
import com.rti.dds.dynamicdata.DynamicDataWriter;
import com.rti.dds.infrastructure.*;
import com.rti.dds.publication.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

import com.rti.dds.dynamicdata.*;
import com.rti.dds.typecode.*;

// ===========================================================================

public class ShapeTypePublisher {

    private static String EXAMPLE_TYPE_NAME = "ShapesType";

    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /*
         * Uncomment this to turn on additional logging
         * Logger.get_instance().set_verbosity_by_category(
         * LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
         * LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
         */

        // --- Run --- //
        publisherMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private ShapeTypePublisher() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void publisherMain(int domainId, int sampleCount) {

        /*** DDS ENTITIES ***/
        DomainParticipant participant = null;
        Publisher publisher = null;
        Topic topic = null;
        InstanceHandle_t instance_handle = InstanceHandle_t.HANDLE_NIL;
        /*** Shape direction variables ***/
        int direction = 1; /* 1 means left to right and -1 right to left */
        int x_position = 50; /* 50 is the initial position */
        /*** DynamicData parameters that we will need ***/
        TypeCode type_code = null;

        try {
            // --- Create participant --- //

            participant = DomainParticipantFactory.TheParticipantFactory
                    .create_participant(domainId,
                            DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                            null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }

            // --- Create publisher --- //

            publisher = participant.create_publisher(
                    DomainParticipant.PUBLISHER_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (publisher == null) {
                System.err.println("create_publisher error\n");
                return;
            }

            /*
             * Create DynamicData using TypeCode from ShapeTypeTypeCode If you
             * are NOT using a type generated with rtiddsgen, you need to create
             * this TypeCode from scratch.
             */
            type_code = ShapeTypeTypeCode.VALUE;

            /* Create the Dynamic data type support object */
            DynamicDataTypeSupport type_support = new DynamicDataTypeSupport(
                    type_code, DynamicDataTypeSupport.TYPE_PROPERTY_DEFAULT);

            // --- Create topic --- //

            /* Register type before creating topic */
            String typeName = EXAMPLE_TYPE_NAME;
            type_support.register_type(participant, typeName);

            /*
             * Make sure both publisher and subscriber share the same topic
             * name. In the Shapes example: we are publishing a Square, which is
             * the topic name. If you want to publish other shapes (Triangle or
             * Circle), you just need to update the topic name.
             */
            topic = participant.create_topic("Square", typeName,
                    DomainParticipant.TOPIC_QOS_DEFAULT, null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }

            // --- Create writer --- //
            /* To use DynamicData, we need to assign the generic
             * DataWriter to a DynamicDataWriter, using a casting.
             */

            DynamicDataWriter writer = (DynamicDataWriter) participant
                    .create_datawriter(topic, Publisher.DATAWRITER_QOS_DEFAULT,
                            null, /* listener */
                            StatusKind.STATUS_MASK_NONE);
            if (writer == null) {
                System.err.println("create_datawriter error\n");
                return;
            }

            // --- Write --- //

            /* Create an instance of the sparse data we are about to send */
            DynamicData data = new DynamicData(type_code,
                    DynamicData.PROPERTY_DEFAULT);

            /* Initialize the DynamicData object */
            data.set_string("color", DynamicData.MEMBER_ID_UNSPECIFIED, "BLUE");
            data.set_int("x", DynamicData.MEMBER_ID_UNSPECIFIED, 100);
            data.set_int("y", DynamicData.MEMBER_ID_UNSPECIFIED, 100);
            data.set_int("shapesize", DynamicData.MEMBER_ID_UNSPECIFIED, 30);

            final long sendPeriodMillis = 100; // 100 ms

            for (int count = 0; (sampleCount == 0) || (count < sampleCount);
                    ++count) {
                System.out.println("Sending shapesize " + (30 + (count % 20)));
                System.out.println("Sending x position " + x_position);

                /* Modify the shapesize from 30 to 50 */
                data.set_int("shapesize", DynamicData.MEMBER_ID_UNSPECIFIED,
                        30 + (count % 20));

                /* Modify the position */
                data.set_int("x", DynamicData.MEMBER_ID_UNSPECIFIED, 
                        x_position);

                /*
                 * The x_position will be modified adding or substracting 2 to
                 * the previous x_position depending on the direction.
                 */
                x_position += (direction * 2);

                /*
                 * The x_position will stay between 50 and 150 pixels. When the
                 * position is greater than 150 'direction' will be negative
                 * (moving to the left) and when it is lower than 50 'direction'
                 * will be possitive (moving to the right).
                 */
                if (x_position >= 150) {
                    direction = -1;
                }
                if (x_position <= 50) {
                    direction = 1;
                }

                /* Write data */
                writer.write(data, instance_handle);
                try {
                    Thread.sleep(sendPeriodMillis);
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }

            // writer.unregister_instance(instance, instance_handle);

        } finally {

            // --- Shutdown --- //

            if (participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory
                        .delete_participant(participant);
            }
            /*
             * RTI Connext provides finalize_instance() method for people who
             * want to release memory used by the participant factory singleton.
             * Uncomment the following block of code for clean destruction of
             * the participant factory singleton.
             */
            // DomainParticipantFactory.finalize_instance();
        }
    }
}
