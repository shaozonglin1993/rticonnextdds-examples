/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/

/* ccfSubscriber.java

   A publication of data of type ccf

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language java -example <arch> .idl

   Example publication of type ccf automatically generated by 
   'rtiddsgen' To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription on the same domain used for with the command
       java ccfSubscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       java ccfPublisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
            
       Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
       Java.                       
       
        On UNIX systems: 
             add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
             variable
                                         
        On Windows systems:
             add %NDDSHOME%\lib\<arch> to the 'Path' environment variable
                        

       Run the Java applications:
       
        java -Djava.ext.dirs=$NDDSHOME/class ccfPublisher <domain_id>

        java -Djava.ext.dirs=$NDDSHOME/class ccfSubscriber <domain_id>  
       
       
modification history
------------ -------
20May2014,amb Example adapted for RTI Connext DDS 5.1   
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class ccfSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }
        
        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */
        
        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------
    
    // --- Constructors: -----------------------------------------------------

    private ccfSubscriber() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        ccfDataReader reader = null;

        try {

            // --- Create participant --- //

            /*
             * To customize participant QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            participant = DomainParticipantFactory.TheParticipantFactory
                    .create_participant(domainId,
                            DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                            null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }

            // --- Create subscriber --- //

            /*
             * To customize subscriber QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            subscriber = participant.create_subscriber(
                    DomainParticipant.SUBSCRIBER_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }

            // --- Create topic --- //

            /* Register type before creating topic */
            String typeName = ccfTypeSupport.get_type_name();
            ccfTypeSupport.register_type(participant, typeName);

            /*
             * To customize topic QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            topic = participant.create_topic("Example ccf", typeName,
                    DomainParticipant.TOPIC_QOS_DEFAULT, null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }

            /* Start changes for Custom_Content_Filter */

            /* Create and register custom filter */
            CustomFilter custom_filter = new CustomFilter();
            participant.register_contentfilter("CustomFilter", custom_filter);

            String param_list[] = { "2", "divides" };
            StringSeq parameters = new StringSeq(
                    java.util.Arrays.asList(param_list));

            /* Create content filtered topic */
            ContentFilteredTopic cft = participant
                    .create_contentfilteredtopic_with_filter(
                            "ContentFilteredTopic", topic, "%0 %1 x",
                            parameters, "CustomFilter");

            System.out.print("Filter: 2 divides x\n");
            /*
             * Also note that we pass 'cft' rather than 'topic' to the
             * datareader below
             */
            /* End changes for Custom_Content_Filter */

            // --- Create reader --- //

            listener = new ccfListener();

            /*
             * NOTE THAT WE USE THE PREVIOUSLY CREATED CUSTOM FILTERED TOPIC TO READ
             * NEW SAMPLES
             */
            reader = (ccfDataReader) subscriber.create_datareader(cft,
                    Subscriber.DATAREADER_QOS_DEFAULT, listener,
                    StatusKind.STATUS_MASK_ALL);
            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }

            // --- Wait for data --- //

            final long receivePeriodSec = 1;

            for (int count = 0; (sampleCount == 0) || (count < sampleCount); 
                    ++count) {
                if (count == 10) {
                    System.out.print("changing filter parameters\n");
                    System.out.print("Filter: 15 greater-than x\n");
                    parameters.set(0, "15");
                    parameters.set(1, "greater-than");
                    cft.set_expression_parameters(parameters);
                } else if (count == 20) {
                    System.out.print("changing filter parameters\n");
                    System.out.print("Filter: 3 divides x\n");
                    StringSeq oldParameters = new StringSeq();
                    cft.get_expression_parameters(oldParameters);

                    oldParameters.set(0, "3");
                    oldParameters.set(1, "divides");
                    cft.set_expression_parameters(oldParameters);
                }

                try {
                    Thread.sleep(receivePeriodSec * 1000); // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if (participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory
                        .delete_participant(participant);
            }
            /*
             * RTI Connext provides the finalize_instance() method for users who
             * want to release memory used by the participant factory singleton.
             * Uncomment the following block of code for clean destruction of
             * the participant factory singleton.
             */
            // DomainParticipantFactory.finalize_instance();
        }
    }

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================

    private static class ccfListener extends DataReaderAdapter {

        ccfSeq _dataSeq = new ccfSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            ccfDataReader ccfReader = (ccfDataReader) reader;

            try {
                ccfReader.take(_dataSeq, _infoSeq,
                        ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                        SampleStateKind.ANY_SAMPLE_STATE,
                        ViewStateKind.ANY_VIEW_STATE,
                        InstanceStateKind.ANY_INSTANCE_STATE);

                for (int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo) _infoSeq.get(i);

                    if (info.valid_data) {
                        System.out.println(((ccf) _dataSeq.get(i)).toString(
                                "Received", 0));

                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                ccfReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
}
