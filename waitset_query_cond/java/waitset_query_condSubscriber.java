/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/
/* waitset_query_condSubscriber.java

   A publication of data of type waitset_query_cond

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language java -example <arch> .idl

   Example publication of type waitset_query_cond automatically generated by 
   'rtiddsgen' To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription on the same domain used for with the command
       java waitset_query_condSubscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       java waitset_query_condPublisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
            
       Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
       Java.                       
       
        On UNIX systems: 
             add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
             variable
                                         
        On Windows systems:
             add %NDDSHOME%\lib\<arch> to the 'Path' environment variable
                        

       Run the Java applications:
       
        java -Djava.ext.dirs=$NDDSHOME/class waitset_query_condPublisher 
                                                                    <domain_id>

        java -Djava.ext.dirs=$NDDSHOME/class waitset_query_condSubscriber 
                                                                    <domain_id>  
       
       
modification history
------------ -------   
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class waitset_query_condSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------
    
    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }
        
        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }
        
        
        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */
        
        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }
    
    
    
    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------
    
    // --- Constructors: -----------------------------------------------------
    
    private waitset_query_condSubscriber() {
        super();
    }
    
    
    // -----------------------------------------------------------------------
    
    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        waitset_query_condDataReader reader = null;
        /* Auxiliary variables */
        String even_string = new String("'EVEN'");
        String odd_string = new String("'ODD'");
        
        
        try {

            // --- Create participant --- //
    
            /* To customize participant QoS, use
               the configuration file
               USER_QOS_PROFILES.xml */
    
            participant = DomainParticipantFactory.TheParticipantFactory.
                create_participant(
                    domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }                         

            // --- Create subscriber --- //
    
            /* To customize subscriber QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     
                
            // --- Create topic --- //
        
            /* Register type before creating topic */
            String typeName = waitset_query_condTypeSupport.get_type_name(); 
            waitset_query_condTypeSupport.register_type(participant, typeName);
    
            /* To customize topic QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            topic = participant.create_topic(
                "Example waitset_query_cond",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }                     
        
            // --- Create reader --- //

            /* To customize data reader QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            reader = (waitset_query_condDataReader)
                subscriber.create_datareader(
                    topic, Subscriber.DATAREADER_QOS_DEFAULT, null,
                    StatusKind.STATUS_MASK_NONE);
            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }                         
            
            /* Create query condition */
            StringSeq query_parameters = new StringSeq(1);
            query_parameters.add(even_string);
            String query_expression = new String("name MATCH %0"); 
            
            /* The initial value of the parameters is EVEN string */
            QueryCondition query_condition = reader.create_querycondition(
                    SampleStateKind.NOT_READ_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE,
                    query_expression,
                    query_parameters);
            if (query_condition == null) {
                System.err.println("create_querycondition error\n");
                return;
            }

            WaitSet waitset = new WaitSet();
            
            /* Attach Query Conditions */
            waitset.attach_condition(query_condition);
            
            /* wait_timeaut is 1.5 secs */
            final Duration_t wait_timeout = new Duration_t(1,500000000); 
            
            
            System.out.println("\n>>>Timeout: " + wait_timeout.sec + " sec & " + 
                        wait_timeout.nanosec + " nanosec");
            System.out.println (">>> Query conditions: name MATCH %0");
            System.out.println ("\t%0 = " + query_parameters.get(0));
            System.out.println ("---------------------------------\n");
            
            
            // --- Wait for data --- //
            for (int count = 0;
                 (sampleCount == 0) || (count < sampleCount);
                 ++count) {
                ConditionSeq active_conditions_seq = new ConditionSeq();
                
                /* We set a new parameter in the Query Condition after 7 secs */
                if (count == 7) {
                    query_parameters.set(0,odd_string);
                    System.out.println("CHANGING THE QUERY CONDITION");
                    System.out.println("\n>>> Query conditions: name MATCH %0");
                    System.out.println("\t%0 = " + query_parameters.get(0));
                    System.out.println(">>> We keep one sample in the "
                            + "history");
                    System.out.println("-------------------------------------"
                            + "\n");
                    query_condition.set_query_parameters(query_parameters);
                }

                /* wait() blocks execution of the thread until one or more 
                 * attached Conditions become true, or until a user-specified 
                 * timeout expires.
                 */
                try {
                    waitset.wait(active_conditions_seq, wait_timeout);
                } catch (RETCODE_TIMEOUT to) {
                    System.out.println(
                            "Wait timed out!! No conditions were triggered.");
                    continue;
                } 
                
                waitset_query_condSeq data_seq = new waitset_query_condSeq();
                SampleInfoSeq info_seq = new SampleInfoSeq();
                
                boolean follow = true;
                while (follow) {
                    try {
                        reader.take_w_condition(
                           data_seq, info_seq, 
                           ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                           query_condition);
    
                        /* Print data */
                        for (int i = 0; i < data_seq.size(); ++i) {
                            if (!((SampleInfo) info_seq.get(i)).valid_data) {
                                System.out.println("Got metadata");
                                continue;
                            }
                            System.out.println(
                                    ((waitset_query_cond)data_seq.get(i))
                                    .toString("Received",0));
                        }
                    } catch (RETCODE_NO_DATA noData) {
                        /* When there isn't data, the subscriber
                         * stop to take samples
                         */
                        follow = false;
                    } finally {
                        /* Return the loaned data */
                        reader.return_loan(data_seq, info_seq);
                    }
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                    delete_participant(participant);
            }
            /* RTI Connext provides the finalize_instance()
               method for users who want to release memory used by the
               participant factory singleton. Uncomment the following block of
               code for clean destruction of the participant factory
               singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }
}


        