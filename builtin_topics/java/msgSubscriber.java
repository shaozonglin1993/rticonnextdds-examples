/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/

/* msgSubscriber.java

   A publication of data of type msg

   This file is derived from code automatically generated by the rtiddsgen
   command:

   rtiddsgen -language java -example <arch> .idl

   Example publication of type msg automatically generated by
   'rtiddsgen' To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription on the same domain used for RTI Data Distribution
       Service with the command
       java msgSubscriber <domain_id> <sample_count>

   (3) Start the publication on the same domain used for RTI Data Distribution
       Service with the command
       java msgPublisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and
       multicast receive addresses via an environment variable or a file
       (in the current working directory) called NDDS_DISCOVERY_PEERS.

   You can run any number of publishers and subscribers programs, and can
   add and remove them dynamically from the domain.


   Example:

       To run the example application on domain <domain_id>:

       Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
       Java.

        On UNIX systems:
             add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
             variable

        On Windows systems:
             add %NDDSHOME%\lib\<arch> to the 'Path' environment variable


       Run the Java applications:

        java -Djava.ext.dirs=$NDDSHOME/class msgPublisher <domain_id>

        java -Djava.ext.dirs=$NDDSHOME/class msgSubscriber <domain_id>


modification history
------------ -------
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class msgSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        //// Changes for Builtin_Topics
        // Get arguments for auth strings and pass to subscriber_main()

        String participantAuth = "password";
        if (args.length >= 3) {
            participantAuth = args[2];
        }

        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        subscriberMain(domainId, sampleCount, participantAuth);
    }



    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private msgSubscriber() {
        super();
    }


    // -----------------------------------------------------------------------

    //// Changes for Builtin_Topics
    private static void subscriberMain(int domainId, int sampleCount,
            String participantAuth) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        msgDataReader reader = null;

        try {

            //// Start changes for Builtin_Topics
            // Set user_data qos field for participant

            /* Get default participant QoS to customize */
            DomainParticipantQos participantQos = new DomainParticipantQos();
            DomainParticipantFactory.TheParticipantFactory
                    .get_default_participant_qos(participantQos);

            // If you want to change the Participant's QoS programmatically
            // rather than using the XML file, you will need to uncomment the
            // following line.
            //participantQos.resource_limits.participant_user_data_max_length = 1024;

            // user_data is opaque to DDS
            int len = participantAuth.length();
            int max = participantQos.resource_limits.
                        participant_user_data_max_length;

            if (len > max) {
                System.out.println(
                        "error, participant user_data exceeds resource limits");
            } else {
                participantQos.user_data.value.addAllByte(
                        participantAuth.getBytes());
            }

            // --- Create participant --- //

            /* To customize participant QoS, use
               the configuration file USER_QOS_PROFILES.xml */

            participant = DomainParticipantFactory.TheParticipantFactory.
                create_participant(
                    domainId, participantQos,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }

            participant.enable();

            // --- Create subscriber --- //

            /* To customize subscriber QoS, use
               the configuration file USER_QOS_PROFILES.xml */

            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }

            // --- Create topic --- //

            /* Register the type before creating the topic */
            String typeName = msgTypeSupport.get_type_name();
            msgTypeSupport.register_type(participant, typeName);

            /* To customize topic QoS, use
               the configuration file USER_QOS_PROFILES.xml */

            topic = participant.create_topic(
                "Example msg",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }

            // --- Create reader --- //

            listener = new msgListener();


            /* To customize data reader QoS, use
               the configuration file USER_QOS_PROFILES.xml */

            reader = (msgDataReader)
                subscriber.create_datareader(
                    topic, Subscriber.DATAREADER_QOS_DEFAULT, listener,
                    StatusKind.STATUS_MASK_ALL);
            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }

            // --- Wait for data --- //

            final long receivePeriodSec = 1;

            for (int count = 0;
                 (sampleCount == 0) || (count < sampleCount);
                 ++count) {
//                System.out.println("msg subscriber sleeping for "
//                                   + receivePeriodSec + " sec...");
                try {
                    Thread.sleep(receivePeriodSec * 1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                    delete_participant(participant);
            }
            /* RTI Data Distribution Service provides the finalize_instance()
               method for users who want to release memory used by the
               participant factory singleton. Uncomment the following block of
               code for clean destruction of the participant factory
               singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================

    private static class msgListener extends DataReaderAdapter {

        msgSeq _dataSeq = new msgSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            msgDataReader msgReader =
                (msgDataReader)reader;

            try {
                msgReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
                        System.out.println(
                            ((msg)_dataSeq.get(i)).toString("Received",0));


                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                msgReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
}
