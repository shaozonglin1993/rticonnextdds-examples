/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
/* ordered_subscriber.cs

   A subscription example

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C# -example <arch> ordered.idl

   Example subscription of type ordered automatically generated by 
   'rtiddsgen'. To test them, follow these steps:

   (1) Compile this file and the example publication.

   (2) Start the subscription with the command
       objs\<arch>\ordered_subscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       objs\<arch>\ordered_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 

   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
                                   
   Example:
        
       To run the example application on domain <domain_id>:
                          
       bin\<Debug|Release>\ordered_publisher <domain_id> <sample_count>  
       bin\<Debug|Release>\ordered_subscriber <domain_id> <sample_count>
              
       
modification history
------------ -------
*/

public class orderedSubscriber {
    private const int MAX_SUBSCRIBERS = 2;
    /* Start changes for Ordered_Presentation*/

    /* No listener is needed; we poll readers in this function */
    private static void poll_data(DDS.DataReader[] reader, int numreaders) {
        DDS.SampleInfoSeq info_seq = new DDS.SampleInfoSeq();
        orderedSeq data_seq = new orderedSeq();

        for (int r = 0; r < numreaders; ++r) {
            try {
                ((orderedDataReader)(reader[r])).take(
                    data_seq,
                    info_seq,
                    DDS.ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    DDS.SampleStateKind.ANY_SAMPLE_STATE,
                    DDS.ViewStateKind.ANY_VIEW_STATE,
                    DDS.InstanceStateKind.ANY_INSTANCE_STATE);
            } catch (DDS.Retcode_NoData) {
                // Not an error
                return;
            } catch (DDS.Exception e) {
                // Is an error
                Console.WriteLine("take error {0}", e);
                return;
            }

            System.Int32 data_length = data_seq.length;            
            for (int i = 0; i < data_length; ++i) {
                if (!info_seq.get_at(i).valid_data) {
                    continue;
                }
                // Make things a bit easier to read.
                int ident = r;
                while (ident-- != 0) {
                    Console.Write("\t");
                }
                Console.WriteLine("Reader {0}: Instance{1}->value = {2}", r, 
                    data_seq.get_at(i).id, data_seq.get_at(i).value);                
            }

            try {
                ((orderedDataReader)(reader[r])).return_loan(data_seq, 
                        info_seq);
            } catch (DDS.Exception e) {
                Console.WriteLine("return loan error {0}", e);
            }

            info_seq.ensure_length(0, 0);
            data_seq.ensure_length(0, 0);
        }
    }

    /* End changes for Ordered_Presentation*/

    public static void Main(string[] args) {

        // --- Get domain ID --- //
        int domain_id = 0;
        if (args.Length >= 1) {
            domain_id = Int32.Parse(args[0]);
        }

        // --- Get max loop count; 0 means infinite loop  --- //
        int sample_count = 0;
        if (args.Length >= 2) {
            sample_count = Int32.Parse(args[1]);
        }

        /* Uncomment this to turn on additional logging
        NDDS.ConfigLogger.get_instance().set_verbosity_by_category(
            NDDS.LogCategory.NDDS_CONFIG_LOG_CATEGORY_API, 
            NDDS.LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        try {
            orderedSubscriber.subscribe(
                domain_id, sample_count);
        }
        catch(DDS.Exception) {
            Console.WriteLine("error in subscriber");
        }
    }

    static void subscribe(int domain_id, int sample_count) {

        // --- Create participant --- //

        /* To customize the participant QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.DomainParticipant participant =
            DDS.DomainParticipantFactory.get_instance().create_participant(
                domain_id,
                DDS.DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT, 
                null /* listener */,
                DDS.StatusMask.STATUS_MASK_NONE);
        if (participant == null) {
            shutdown(participant);
            throw new ApplicationException("create_participant error");
        }

        // --- Create topic --- //

        /* Register the type before creating the topic */
        System.String type_name = orderedTypeSupport.get_type_name();
        try {
            orderedTypeSupport.register_type(
                participant, type_name);
        }
        catch(DDS.Exception e) {
            Console.WriteLine("register_type error {0}", e);
            shutdown(participant);
            throw e;
        }

        /* To customize the topic QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.Topic topic = participant.create_topic(
            "Example ordered",
            type_name,
            DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (topic == null) {
            shutdown(participant);
            throw new ApplicationException("create_topic error");
        }

        /* Start changes for Ordered_Presentation */

        /* Create two subscribers to illustrate different presentation QoS
         * This is a publisher/subscriber level QoS, so we have to
         * do it here instead of just making two datareaders
         */
        
        DDS.Subscriber[] subscriber = new DDS.Subscriber[MAX_SUBSCRIBERS];
        DDS.DataReader[] reader = new DDS.DataReader[MAX_SUBSCRIBERS];

        /* Subscriber[0], reader[0] and ordered_reader[0] is getting
         * the profile "ordered_Profile_subscriber_instance"
         */
        /* Subscriber[1], reader[1] and ordered_reader[1] is getting
         * the profile "ordered_Profile_subscriber_topic"
         */
        String[] profile_name = new String[MAX_SUBSCRIBERS] 
            {"ordered_Profile_subscriber_instance",
                 "ordered_Profile_subscriber_topic" };
        for (int i = 0; i < MAX_SUBSCRIBERS; ++i) {
            Console.WriteLine("Subscriber {0} using {1}", i, profile_name[i]);
            subscriber[i] = participant.create_subscriber_with_profile(
                "ordered_Library", profile_name[i], null,
                DDS.StatusMask.STATUS_MASK_NONE);
            if (subscriber[i] == null) {
                shutdown(participant);
                throw new ApplicationException("create_subscriber error");
            }

            reader[i] = subscriber[i].create_datareader_with_profile(topic,
                "ordered_Library", profile_name[i], null,
                DDS.StatusMask.STATUS_MASK_ALL);
            if (reader[i] == null) {
                shutdown(participant);
                throw new ApplicationException("create_datareader error");
            }
        }

        /* If you want to change the Publisher's QoS programmatically rather 
         * than using the XML file, you will need to add the following lines to 
         * your code and comment out the above 'for' loop.
         */
        /* Get default subscriber QoS to customize */
/*        DDS.SubscriberQos subscriber_qos = new DDS.SubscriberQos();
        participant.get_default_subscriber_qos(subscriber_qos);

*/        /* Set this for both subscribers */
/*        subscriber_qos.presentation.ordered_access = true;

*/        /* No listener needed, but we do need to increase history depth */

        /* Get default datareader QoS to customize */
/*        DDS.DataReaderQos datareader_qos = new DDS.DataReaderQos();

        for (int i = 0; i < MAX_SUBSCRIBERS; ++i) {
            if (i == 0) {
                Console.WriteLine("Subscriber 0 using Instance access scope");
                subscriber_qos.presentation.access_scope = 
                    DDS.PresentationQosPolicyAccessScopeKind
                        .INSTANCE_PRESENTATION_QOS;
            } else {
                Console.WriteLine("Subscriber 1 using Topic access scope");
                subscriber_qos.presentation.access_scope = 
                    DDS.PresentationQosPolicyAccessScopeKind
                        .TOPIC_PRESENTATION_QOS;
            }

*/            /* To create subscriber with default QoS, use 
               * DDS.DomainParticipant.SUBSCRIBER_QOS_DEFAULTinstead of 
               * subscriber_qos */
/*            subscriber[i] = participant.create_subscriber(
                subscriber_qos, null, DDS.StatusMask.STATUS_MASK_NONE);
            if (subscriber == null) {
                shutdown(participant);
                throw new ApplicationException("create_subscriber error");
            }
            subscriber[i].get_default_datareader_qos(datareader_qos);
            datareader_qos.history.depth = 10;

*/            /* To create datareader with default QoS, use 
               * DDS.Subscriber.DATAREADER_QOS_DEFAULT instead of datareader_qos
               */
/*            reader[i] = subscriber[i].create_datareader(
                topic,
                datareader_qos,
                null,
                DDS.StatusMask.STATUS_MASK_NONE);
            if (reader[i] == null) {
                shutdown(participant);
                throw new ApplicationException("create_datareader error");
            }
        }

*/
        // --- Wait for data --- //

        /* Main loop */
        const System.Int32 receive_period = 4000; // milliseconds
        for (int count=0;
             (sample_count == 0) || (count < sample_count);
             ++count) {
             Console.WriteLine(
                 "\nSleeping for {0} sec...\n-----",
                 receive_period / 1000);

            System.Threading.Thread.Sleep(receive_period);

            poll_data(reader, 2);
        }

        // --- Shutdown --- //

        /* Delete all entities */
        shutdown(participant);
     }


    static void shutdown(
        DDS.DomainParticipant participant) {

        /* Delete all entities */

        if (participant != null) {
            participant.delete_contained_entities();
            DDS.DomainParticipantFactory.get_instance().delete_participant(
                ref participant);
        }

        /* RTI Connext provides finalize_instance() method on
           domain participant factory for users who want to release memory
           used by the participant factory. Uncomment the following block of
           code for clean destruction of the singleton. */
        /*
        try {
            DDS.DomainParticipantFactory.finalize_instance();
        }
        catch(DDS.Exception e) {
            Console.WriteLine("finalize_instance error {0}", e);
            throw e;
        }
        */
    }
}


