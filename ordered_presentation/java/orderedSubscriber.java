/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/
/* orderedSubscriber.java

 A publication of data of type ordered

 This file is derived from code automatically generated by the rtiddsgen 
 command:

 rtiddsgen -language java -example <arch> .idl

 Example publication of type ordered automatically generated by 
 'rtiddsgen' To test them follow these steps:

 (1) Compile this file and the example subscription.

 (2) Start the subscription on the same domain used for with the command
 java orderedSubscriber <domain_id> <sample_count>

 (3) Start the publication with the command
 java orderedPublisher <domain_id> <sample_count>

 (4) [Optional] Specify the list of discovery initial peers and 
 multicast receive addresses via an environment variable or a file 
 (in the current working directory) called NDDS_DISCOVERY_PEERS. 

 You can run any number of publishers and subscribers programs, and can 
 add and remove them dynamically from the domain.


 Example:

 To run the example application on domain <domain_id>:

 Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
 Java.                       

 On UNIX systems: 
 add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
 variable

 On Windows systems:
 add %NDDSHOME%\lib\<arch> to the 'Path' environment variable


 Run the Java applications:

 java -Djava.ext.dirs=$NDDSHOME/class orderedPublisher <domain_id>

 java -Djava.ext.dirs=$NDDSHOME/class orderedSubscriber <domain_id>  


 modification history
 ------------ -------   
 */

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class orderedSubscriber {
    private static int MAX_SUBSCRIBERS = 2;

    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /*
         * Uncomment this to turn on additional logging
         * Logger.get_instance().set_verbosity_by_category(
         * LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
         * LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
         */

        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private orderedSubscriber() {
        super();
    }

    /* Start changes for Ordered_Presentation */

    /* No listener is needed; we poll readers in this function */
    private static void poll_data(DataReader[] reader, int numreaders) {
        orderedSeq _dataSeq = new orderedSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        for (int r = 0; r < numreaders; ++r) {
            try {
                ((orderedDataReader) (reader[r])).take(_dataSeq, _infoSeq,
                        ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                        SampleStateKind.ANY_SAMPLE_STATE,
                        ViewStateKind.ANY_VIEW_STATE,
                        InstanceStateKind.ANY_INSTANCE_STATE);

                for (int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo) _infoSeq.get(i);

                    if (!info.valid_data) {
                        continue;
                    } else {
                        // Make things a bit easier to read.
                        int ident = r;
                        while (ident-- != 0) {
                            System.out.print("\t");
                        }
                        System.out.println("Reader " + r + ": Instance"
                                + ((ordered) _dataSeq.get(i)).id + "->value = "
                                + ((ordered) _dataSeq.get(i)).value);
                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // Not an error
                return;
            } catch (RETCODE_ERROR e) {
                // Is an error
                System.out.println("take error " + e);
                return;
            } finally {
                ((orderedDataReader) (reader[r])).return_loan(_dataSeq,
                        _infoSeq);
                _infoSeq.setMaximum(0);
                _dataSeq.setMaximum(0);
            }
        }
    }

    /* End changes for Ordered_Presentation */

    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Topic topic = null;

        try {

            // --- Create participant --- //

            /*
             * To customize participant QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            participant = DomainParticipantFactory.TheParticipantFactory
                    .create_participant(domainId,
                            DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                            null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }

            // --- Create topic --- //

            /* Register type before creating topic */
            String typeName = orderedTypeSupport.get_type_name();
            orderedTypeSupport.register_type(participant, typeName);

            /*
             * To customize topic QoS, use the configuration file
             * USER_QOS_PROFILES.xml
             */

            topic = participant.create_topic("Example ordered", typeName,
                    DomainParticipant.TOPIC_QOS_DEFAULT, null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }

            /* Start changes for Ordered_Presentation */

            /*
             * Create two subscribers to illustrate different presentation QoS
             * This is a publisher/subscriber level QoS, so we have to do it
             * here instead of just making two datareaders
             */
            Subscriber[] subscriber = new Subscriber[MAX_SUBSCRIBERS];
            DataReader[] reader = new DataReader[MAX_SUBSCRIBERS];
            String[] profile_name = { "ordered_Profile_subscriber_instance",
                    "ordered_Profile_subscriber_topic" };

            /*
             * Subscriber[0], reader[0] and ordered_reader[0] is getting the
             * profile "ordered_Profile_subscriber_instance"
             */
            /*
             * Subscriber[1], reader[1] and ordered_reader[1] is getting the
             * profile "ordered_Profile_subscriber_topic"
             */

            for (int i = 0; i < MAX_SUBSCRIBERS; ++i) {
                System.out.println("Subscriber " + i + " using "
                        + profile_name[i]);

                subscriber[i] = participant.create_subscriber_with_profile(
                        "ordered_Library", profile_name[i], null,
                        StatusKind.STATUS_MASK_NONE);
                if (subscriber[i] == null) {
                    System.err.println("create_subscriber error\n");
                    return;
                }

                reader[i] = subscriber[i].create_datareader_with_profile(topic,
                        "ordered_Library", profile_name[i], null,
                        StatusKind.STATUS_MASK_ALL);
                if (reader[i] == null) {
                    System.err.println("create_datareader error\n");
                    return;
                }

            }

            /*
             * If you want to change the Publisher's QoS programmatically rather
             * than using the XML file, you will need to add the following lines
             * to your code and comment out the above 'for' loop.
             */
            /* Get default subscriber QoS to customize */
/*            SubscriberQos subscriber_qos = new SubscriberQos();
            participant.get_default_subscriber_qos(subscriber_qos);

            // Set this for both subscribers
            subscriber_qos.presentation.ordered_access = true;

            // No listener needed, but we do need to increase history depth
*/
            /* Get default datareader QoS to customize */
/*            DataReaderQos datareader_qos = new DataReaderQos();

            for (int i = 0; i < MAX_SUBSCRIBERS; ++i) {
                if (i == 0) {
                    System.out.println(
                            "Subscriber 0 using Instance access scope");
                    subscriber_qos.presentation.access_scope = 
                            PresentationQosPolicyAccessScopeKind
                            .INSTANCE_PRESENTATION_QOS;
                } else {
                    System.out.println("Subscriber 1 using Topic access scope");
                    subscriber_qos.presentation.access_scope = 
                            PresentationQosPolicyAccessScopeKind
                            .TOPIC_PRESENTATION_QOS;
                }
*/
                /*
                 * To create subscriber with default QoS, use
                 * DDS.DomainParticipant.SUBSCRIBER_QOS_DEFAULT instead of
                 * subscriber_qos
                 */
/*                subscriber[i] = participant.create_subscriber(subscriber_qos,
                        null, StatusKind.STATUS_MASK_NONE);
                if (subscriber[i] == null) {
                    System.err.println("create_subscriber error\n");
                    return;
                }
                subscriber[i].get_default_datareader_qos(datareader_qos);
                datareader_qos.history.depth = 10;
*/
                /*
                 * To create datareader with default QoS, use
                 * DDS.Subscriber.DATAREADER_QOS_DEFAULT instead of
                 * datareader_qos
                 */
/*                reader[i] = (orderedDataReader) subscriber[i]
                        .create_datareader(topic, datareader_qos,
                                null,
                                StatusKind.STATUS_MASK_NONE);
                if (reader[i] == null) {
                    System.err.println("create_datareader error\n");
                    return;
                }
            }
*/
            // --- Wait for data --- //

            final long receivePeriodSec = 4;

            for (int count = 0; (sampleCount == 0) || (count < sampleCount); 
                    ++count) {
                System.out.println("ordered subscriber sleeping for "
                        + receivePeriodSec + " sec...");
                try {
                    Thread.sleep(receivePeriodSec * 1000); // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
                poll_data(reader, 2);
            }
            /* End changes for Ordered_Presentation */
        } finally {

            // --- Shutdown --- //

            if (participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory
                        .delete_participant(participant);
            }
            /*
             * RTI Connext provides the finalize_instance() method for users who
             * want to release memory used by the participant factory singleton.
             * Uncomment the following block of code for clean destruction of
             * the participant factory singleton.
             */
            // DomainParticipantFactory.finalize_instance();
        }
    }
}
