/*  
	This example illustrates a recursive data-type. That is a data-type that refers to itself.
	These data-types cause various problems in the generated code:
	
	1) rtiddsgen may fail as it is unable to resolve the recursive dependency on the type
	    getting into an infinite recursion that overflows the stack.
	    
	2) rtiddsgen may fail as it is unable to compute the "TypeCode" for the data-type
	
	3) rtiddsgen may fail as it is unable to compute the "max serialized size" for the data-type
	
	4) The generated header files may give compile-time errors due to them referencing types
	    before they are fully defined
	
	These problems can be avoided in C and C++. There is currently no solution for Java:
	
	To overcome (1) annotate the recursive type member with the annotation " //@resolve-name false"
	this prevents rtiddsgen from trying to resolve the type and getting into the infinite
	recursion
		
	To overcome (2) run rtiddsgen with the option -notypecode  
	this option prevents it use the recursive type inside an unbounded sequence and run
	rtiddsgen with the option  trying to compute the typecode.
	
	To overcome (3) run rtiddsgen with the option -unboundedSupport this disables the
	computation of the max serialized size as being unlimited there would be no maximum size.
	Currently this option is only available in C and C++.
	
	To overcome (4) declare the recursive type with the annotation //@Optional
	this causes rtiddsgen to generate a reference/pointer avoiding the self-reference compile-time
	issue.
*/
struct Node {
    long data;
};

struct Tree {
    Node node;
    sequence<Tree> children; //@Optional
                             //@resolve-name false
};
