/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/


/* ordered_groupSubscriber.java

A publication of data of type ordered_group

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type ordered_group automatically generated by 
'rtiddsgen' To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
java ordered_groupSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
java ordered_groupPublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On UNIX systems: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows systems:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/class ordered_groupPublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/class ordered_groupSubscriber <domain_id>  
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class ordered_groupSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private ordered_groupSubscriber() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        
        Topic topic1 = null;
        Topic topic2 = null;
        Topic topic3 = null;
        
        ordered_groupSubscriberListener listener = null;
        
        DataReader reader1 = null;
        DataReader reader2 = null;
        DataReader reader3 = null;

        try {

            // --- Create participant --- //

            /* To customize participant QoS, use
            the configuration file
            USER_QOS_PROFILES.xml */

            participant = DomainParticipantFactory.TheParticipantFactory.
                    create_participant(
                    domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }                         

            // --- Create subscriber --- //

            /* To customize subscriber QoS, use
            the configuration file USER_QOS_PROFILES.xml */
            
            /* The listener has been modified */ 
            
            /* Start changes for Ordered Presentation Example */
            /* Note that the StatusKind is DATA_ON_READERS_STATUS in order
             * to the incoming data can be read by the SubscriberListener
             */
            listener = new ordered_groupSubscriberListener();
            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT,
                listener,
                StatusKind.DATA_ON_READERS_STATUS); 
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     
            
            /* End changes for Ordered Presentation Example */
            
            // --- Create topics --- //

            /* Register type before creating topic */
            String typeName = ordered_groupTypeSupport.get_type_name(); 
            ordered_groupTypeSupport.register_type(participant, typeName);
            
            /* Start changes for Ordered Presentation Example */
            
            /* TOPICS */
            
            /* To customize topic QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            topic1 = participant.create_topic(
                "Topic1", typeName, 
                DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic1 == null) {
                System.err.println("create_topic error\n");
                return;
            }                     

            topic2 = participant.create_topic(
                    "Topic2", typeName,
                    DomainParticipant.TOPIC_QOS_DEFAULT, null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (topic2 == null) {
                System.err.println("create_topic error\n");
                return;
            }

            topic3 = participant.create_topic(
                    "Topic3", typeName,
                    DomainParticipant.TOPIC_QOS_DEFAULT, null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (topic3 == null) {
                System.err.println("create_topic error\n");
                return;
            }
            
            /* DATAREADERS */
            
            /* To customize data reader QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            reader1 = subscriber.create_datareader(
                topic1,
                Subscriber.DATAREADER_QOS_DEFAULT, 
                null,
                StatusKind.STATUS_MASK_ALL);
            if (reader1 == null) {
                System.err.println("create_datareader error\n");
                return;
            }                         
            
            reader2 = subscriber.create_datareader(
                    topic2,
                    Subscriber.DATAREADER_QOS_DEFAULT,
                    null,
                    StatusKind.STATUS_MASK_ALL);
            if (reader2 == null) {
                System.err.println("create_datareader error\n");
                return;
            }
            reader3 = subscriber.create_datareader(
                    topic3,
                    Subscriber.DATAREADER_QOS_DEFAULT, 
                    null,
                    StatusKind.STATUS_MASK_ALL);
            if (reader3 == null) {
                System.err.println("create_datareader error\n");
                return;
            }
            
            /* End changes for Ordered Presentation Example */
            
            // --- Wait for data --- //

            final long receivePeriodSec = 4;

            for (int count = 0;
            (sampleCount == 0) || (count < sampleCount);
            ++count) {
                System.out.println("ordered_group subscriber sleeping for "
                + receivePeriodSec + " sec...");
                try {
                    Thread.sleep(receivePeriodSec * 1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
            /* RTI Data Distribution Service provides the finalize_instance()
            method for users who want to release memory used by the
            participant factory singleton. Uncomment the following block of
            code for clean destruction of the participant factory
            singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================
    /* Start changes for Ordered Presentation Group example */
    private static class ordered_groupSubscriberListener 
        extends SubscriberAdapter {

        ordered_groupDataReader ordered_group_reader = null;
        ordered_group data = new ordered_group();
        SampleInfo info = new SampleInfo();
        DataReaderSeq _my_datareaders = new DataReaderSeq();

        public void on_data_on_readers (Subscriber subs) {
        
            /* IMPORTANT for GROUP access scope: Invoking begin_access() */
            subs.begin_access();

            /* Obtain DataReaders. We obtain a sequence of DataReaders that
             * specifies the order in which each sample should be read */
            try {
                subs.get_datareaders(_my_datareaders, 
                        SampleStateKind.ANY_SAMPLE_STATE, 
                        ViewStateKind.ANY_VIEW_STATE, 
                        InstanceStateKind.ANY_INSTANCE_STATE);
            } catch (RETCODE_ERROR error) {
                System.out.println ("Error in get_datareaders: " + error);
                _my_datareaders.setMaximum(0);
                subs.end_access();
                return;
            }
            
            /* Read the samples received, following the DataReaders sequence */
            try {
                
                for (int i = 0; i < _my_datareaders.size(); ++i) {
                    try { 
                        ordered_group_reader = (ordered_groupDataReader) 
                                _my_datareaders.get(i);
                    } catch (RETCODE_ERROR error) {
                        _my_datareaders.setMaximum(0);
                        subs.end_access();
                        return;
                    }
                     /* IMPORTANT. Use take_next_sample(). We need to take only
                      * one sample each time, as we want to follow the sequence
                      * of DataReaders. This way the samples will be returned in
                      * the order in which they were modified */
                     
                     ordered_group_reader.take_next_sample(data, info);
                     
                     if (info.valid_data) {
                         System.out.println(((ordered_group) data).toString(
                                 "Received", 0));
                     }
                     
                     _my_datareaders.setMaximum(0);
                     
                     /*IMPORTANT for GROUP access scope: Invoking end_access()*/
                     subs.end_access();
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            }
        }
    }
}

