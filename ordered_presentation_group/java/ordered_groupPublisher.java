/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/


/* ordered_groupPublisher.java

A publication of data of type ordered_group

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type ordered_group automatically generated by 
'rtiddsgen' To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
java ordered_groupSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
java ordered_groupPublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS.  

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On Unix: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/lib/java ordered_groupPublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/lib/java ordered_groupSubscriber <domain_id>        
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.publication.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class ordered_groupPublisher {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        publisherMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private ordered_groupPublisher() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void publisherMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Publisher publisher = null;
        
        Topic topic1 = null;
        Topic topic2 = null;
        Topic topic3 = null;
        
        ordered_groupDataWriter writer1 = null;
        ordered_groupDataWriter writer2 = null;
        ordered_groupDataWriter writer3 = null;

        ordered_group instance1 = null;
        ordered_group instance2 = null;
        ordered_group instance3 = null;
        
        try {
            // --- Create participant --- //

            /* To customize participant QoS, use
            the configuration file
            USER_QOS_PROFILES.xml */

            participant = DomainParticipantFactory.TheParticipantFactory.
            create_participant(
                domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }        

            // --- Create publisher --- //

            /* To customize publisher QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            publisher = participant.create_publisher(
                DomainParticipant.PUBLISHER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (publisher == null) {
                System.err.println("create_publisher error\n");
                return;
            }                   

            /* Register type before creating topic */
            String typeName = ordered_groupTypeSupport.get_type_name();
            ordered_groupTypeSupport.register_type(participant, typeName);

            /* To customize topic QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            /* Start changes for Ordered Presentation Group example */
            /* TOPICS */ 
            topic1 = participant.create_topic(
                "Topic1",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic1 == null) {
                System.err.println("create_topic error\n");
                return;
            }
            
            topic2 = participant.create_topic(
                "Topic2",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic2 == null) {
                System.err.println("create_topic error\n");
                return;
            }
            
            topic3 = participant.create_topic(
                "Topic3",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic3 == null) {
                System.err.println("create_topic error\n");
                return;
            }   

            /* DATAWRITERS */
            
            /* To customize data writer QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            writer1 = (ordered_groupDataWriter)
            publisher.create_datawriter(
                topic1, Publisher.DATAWRITER_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (writer1 == null) {
                System.err.println("create_datawriter error\n");
                return;
            }   
            
            writer2 = (ordered_groupDataWriter)
            publisher.create_datawriter(
                topic2, Publisher.DATAWRITER_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (writer2 == null) {
                System.err.println("create_datawriter error\n");
                return;
            }
            
            writer3 = (ordered_groupDataWriter)
            publisher.create_datawriter(
                topic3, Publisher.DATAWRITER_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (writer3 == null) {
                System.err.println("create_datawriter error\n");
                return;
            } 
            
            
            // --- Write --- //

            /* Instances */
            
            /* Create data sample for writing */
            instance1 = new ordered_group();
            instance2 = new ordered_group();
            instance3 = new ordered_group();

            /* End changes for Ordered Presentation Example */
            
            InstanceHandle_t instance_handle = InstanceHandle_t.HANDLE_NIL;
            /* For a data type that has a key, if the same instance is going to
            be written multiple times, initialize the key here
            and register the keyed instance prior to writing */
            //instance_handle = writer.register_instance(instance);

            final long sendPeriodMillis = 1000; // 1 seconds

            for (int count = 0;
            (sampleCount == 0) || (count < sampleCount);
            ++count) {
                System.out.println("Writing ordered_group, count " + count);
                
                /* Start changes for Ordered Presentation Example */
                /* Modify the instance to be written here */
                /* Instance 1 */
                instance1.message = 
                        "First sample, Topic 1 by DataWriter number 1";
                writer1.write(instance1, instance_handle);
                
                instance1.message = 
                        "Second sample, Topic 1 by DataWriter number 1";
                writer1.write(instance1, instance_handle);
                
                /* Instance 2 */
                instance2.message = 
                        "First sample, Topic 2 by DataWriter number 2";
                writer2.write(instance2, instance_handle);
                
                instance2.message = 
                        "Second sample, Topic 2 by DataWriter number 2";
                writer2.write(instance2, instance_handle);
                
                /* Instance 3 */
                instance3.message = 
                        "First sample, Topic 3 by DataWriter number 3";
                writer3.write(instance3, instance_handle);
                
                instance3.message = 
                        "Second sample, Topic 3 by DataWriter number 3";
                writer3.write(instance3, instance_handle);
                
                try {
                    Thread.sleep(sendPeriodMillis);
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
                
                /* End changes for Ordered Presentation Example */
            }
            
            //writer.unregister_instance(instance, instance_handle);

        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
            /* RTI Data Distribution Service provides finalize_instance()
            method for people who want to release memory used by the
            participant factory singleton. Uncomment the following block of
            code for clean destruction of the participant factory
            singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }
}

