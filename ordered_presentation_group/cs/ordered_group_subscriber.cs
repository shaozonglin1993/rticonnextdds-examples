/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/
/* ordered_group_subscriber.cs

A subscription example

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C# -example <arch> ordered_group.idl

Example subscription of type ordered_group automatically generated by 
'rtiddsgen'. To test them, follow these steps:

(1) Compile this file and the example publication.

(2) Start the subscription with the command
objs\<arch>${constructMap.nativeFQNameInModule}_subscriber <domain_id> <sample_count>

(3) Start the publication with the command
objs\<arch>${constructMap.nativeFQNameInModule}_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

bin\<Debug|Release>\ordered_group_publisher <domain_id> <sample_count>  
bin\<Debug|Release>\ordered_group_subscriber <domain_id> <sample_count>
*/

using System;
using System.Collections.Generic;
using System.Text;

public class ordered_groupSubscriber {
    /* Start changes for Ordered Presentation Group example */
    public class ordered_groupSubscriberListener : DDS.SubscriberListener {

        public override void on_data_on_readers(
                DDS.Subscriber sub) {

            /* IMPORTANT for GROUP access scope: Invoking begin_access() */
            sub.begin_access();

            /* Obtain DataReaders. We obtain a sequence of DataReaders that specifies
            the order in which each sample should be read */
            try {
                sub.get_datareaders(my_datareaders,
                    DDS.SampleStateKind.ANY_SAMPLE_STATE,
                    DDS.ViewStateKind.ANY_VIEW_STATE,
                    DDS.InstanceStateKind.ANY_INSTANCE_STATE);
            } catch (DDS.Exception e) {
                Console.WriteLine("get_datareaders error {0}", e);
                my_datareaders.ensure_length(0, 0);
                sub.end_access();
                return;
            }

            /* Read the samples received, following the DataReaders sequence */
            try {
                for (int i = 0; i < my_datareaders.length; ++i) {
                    try {
                        ordered_group_reader = (ordered_groupDataReader)
                            my_datareaders.get_at(i);
                    } catch (DDS.Exception e) {
                        Console.WriteLine("my_datareaders.get_at error {0}", e);
                        sub.end_access();
                        return;
                    }

                    /* IMPORTANT. Use take_next_sample(). We need to take only
                     * one sample each time, as we want to follow the sequence
                     * of DataReaders. This way the samples will be returned in
                     * the order in which they were modified 
                     */
                    ordered_group_reader.take_next_sample(data, info);

                    if (info.valid_data) {
                        ordered_groupTypeSupport.print_data(data);
                    }

                    my_datareaders.ensure_length(0, 0);

                    /* IMPORTANT for GROUP access scope: Invoking end_access() */
                    sub.end_access();
                }
            } catch (DDS.Retcode_NoData noData) {
                //No data to process
            }
        }

        public ordered_groupSubscriberListener() : base() {}

        private ordered_group data = new ordered_group();
        private DDS.SampleInfo info = new DDS.SampleInfo();
        private DDS.DataReaderSeq my_datareaders = new DDS.DataReaderSeq();
        private ordered_groupDataReader ordered_group_reader = null;
    };
    
    /* End changes for Ordered Presentation Group example */

    public static void Main(string[] args) {

        // --- Get domain ID --- //
        int domain_id = 0;
        if (args.Length >= 1) {
            domain_id = Int32.Parse(args[0]);
        }

        // --- Get max loop count; 0 means infinite loop  --- //
        int sample_count = 0;
        if (args.Length >= 2) {
            sample_count = Int32.Parse(args[1]);
        }

        /* Uncomment this to turn on additional logging
        NDDS.ConfigLogger.get_instance().set_verbosity_by_category(
            NDDS.LogCategory.NDDS_CONFIG_LOG_CATEGORY_API, 
            NDDS.LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        try {
            ordered_groupSubscriber.subscribe(
                domain_id, sample_count);
        }
        catch(DDS.Exception) {
            Console.WriteLine("error in subscriber");
        }
    }

    static void subscribe(int domain_id, int sample_count) {

        // --- Create participant --- //

        /* To customize the participant QoS, use 
        the configuration file USER_QOS_PROFILES.xml */
        DDS.DomainParticipant participant =
        DDS.DomainParticipantFactory.get_instance().create_participant(
            domain_id,
            DDS.DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT, 
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (participant == null) {
            shutdown(participant);
            throw new ApplicationException("create_participant error");
        }

        // --- Create subscriber --- //

        /* To customize the subscriber QoS, use 
        the configuration file USER_QOS_PROFILES.xml */

        /* The listener has been modified */

        /* Start changes for Ordered Presentation Example */
        /* Note that the StatusKind is DATA_ON_READERS_STATUS in order
         * to the incoming data can be read by the SubscriberListener
         */

        ordered_groupSubscriberListener subscriber_listener = 
            new ordered_groupSubscriberListener();

        DDS.Subscriber subscriber = participant.create_subscriber(
            DDS.DomainParticipant.SUBSCRIBER_QOS_DEFAULT,
            subscriber_listener,
            (DDS.StatusMask)DDS.StatusKind.DATA_ON_READERS_STATUS);
        if (subscriber == null) {
            shutdown(participant);
            subscriber_listener = null;
            throw new ApplicationException("create_subscriber error");
        }
        
        /* End changes for Ordered Presentation Example */

        // --- Create topics --- //

        /* Register the type before creating the topic */
        System.String type_name = ordered_groupTypeSupport.get_type_name();
        try {
            ordered_groupTypeSupport.register_type(
                participant, type_name);
        }
        catch(DDS.Exception e) {
            Console.WriteLine("register_type error {0}", e);
            shutdown(participant);
            throw e;
        }

        /* Start changes for Ordered Presentation Example */

        /* TOPICS */

        /* To customize the topic QoS, use 
        the configuration file USER_QOS_PROFILES.xml */
        DDS.Topic topic1 = participant.create_topic(
            "Topic1",
            type_name,
            DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (topic1 == null) {
            shutdown(participant);
            throw new ApplicationException("create_topic error");
        }
        
        DDS.Topic topic2 = participant.create_topic(
            "Topic2",
            type_name,
            DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (topic2 == null) {
            shutdown(participant);
            throw new ApplicationException("create_topic error");
        }
        
        DDS.Topic topic3 = participant.create_topic(
            "Topic3",
            type_name,
            DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (topic3 == null) {
            shutdown(participant);
            throw new ApplicationException("create_topic error");
        }

        /* DATAREADERS */

        /* To customize the data reader QoS, use 
        the configuration file USER_QOS_PROFILES.xml */
        DDS.DataReader reader1 = subscriber.create_datareader(
            topic1,
            DDS.Subscriber.DATAREADER_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_ALL);
        if (reader1 == null) {
            shutdown(participant);
            throw new ApplicationException("create_datareader error");
        }

        DDS.DataReader reader2 = subscriber.create_datareader(
            topic2,
            DDS.Subscriber.DATAREADER_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_ALL);
        if (reader2 == null) {
            shutdown(participant);
            throw new ApplicationException("create_datareader error");
        }

        DDS.DataReader reader3 = subscriber.create_datareader(
            topic3,
            DDS.Subscriber.DATAREADER_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_ALL);
        if (reader3 == null) {
            shutdown(participant);
            throw new ApplicationException("create_datareader error");
        }

        /* End changes for Ordered Presentation Example */

        // --- Wait for data --- //

        /* Main loop */
        const System.Int32 receive_period = 4000; // milliseconds
        for (int count=0;
        (sample_count == 0) || (count < sample_count);
        ++count) {
            Console.WriteLine(
                "ordered_group subscriber sleeping for {0} sec...",
            receive_period / 1000);

            System.Threading.Thread.Sleep(receive_period);
        }

        // --- Shutdown --- //

        /* Delete all entities */
        shutdown(participant);
        subscriber_listener = null;
    }

    static void shutdown(
        DDS.DomainParticipant participant) {

        /* Delete all entities */

        if (participant != null) {
            participant.delete_contained_entities();
            DDS.DomainParticipantFactory.get_instance().delete_participant(
                ref participant);
        }

        /* RTI Connext provides finalize_instance() method on
        domain participant factory for users who want to release memory
        used by the participant factory. Uncomment the following block of
        code for clean destruction of the singleton. */
        /*
        try {
            DDS.DomainParticipantFactory.finalize_instance();
        }
        catch(DDS.Exception e) {
            Console.WriteLine("finalize_instance error {0}", e);
            throw e;
        }
        */
    }
}

